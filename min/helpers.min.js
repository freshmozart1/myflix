const mongoose=require("mongoose"),{body:body,param:param}=require("express-validator"),models=require("./models"),movies=models.movie,users=models.user;function _validateUserFieldUnchanged(request,field){return request(field,field+" is the same as the current "+field+".").custom(((fieldValue,{req:req})=>{if("password"===field&&req.user.validatePassword(fieldValue))return!1;if("favourites"===field){if(console.log(req.user.favourites),fieldValue.length!==req.user.favourites.length)return!0;for(let i=0;i<fieldValue.length;i++)if(fieldValue[i]!==req.user.favourites[i].toHexString())return!0;return!1}return fieldValue!==req.user[field]}))}function _validateIdInCollection(request,field,collection,errorMessage){return request(field,errorMessage).custom((async id=>!(!mongoose.Types.ObjectId.isValid(id)||!await collection.findById(id))||Promise.reject()))}function _ifFieldEmptyBail(request,field,message,bailLevel="request"){return request(field,message).notEmpty().bail({level:bailLevel})}function _validateFavouritesAndBail(bailLevel="request"){return body("favourites","Favourites must be an non empty array").isArray({min:1}).bail({level:bailLevel}).optional({values:"falsy"}).custom((async favourites=>{for(const id of favourites){if(!mongoose.Types.ObjectId.isValid(id))return Promise.reject("Invalid movie ID in favourites.");try{if(!await movies.findById(id))return Promise.reject("Invalid movie ID in favourites.")}catch(e){return Promise.reject("Database error + "+e)}}return!0})).bail({level:bailLevel})}function _valiDate(request,field,errorMessage){return request(field,errorMessage).custom((value=>!isNaN(Date.parse(value))))}function _checkBodyEmpty(req,res,next){if(!req.body||0===Object.keys(req.body).length)return res.status(400).end("My Body Is Nobody");next()}function _validateUsername(request,bailLevel="request"){return request("username").custom((async username=>{if(username.length<5)return Promise.reject("The username must be at least 5 characters long.");if(!username.match(/^[a-zA-Z0-9]+$/))return Promise.reject("The username contains non alphanumeric characters - not allowed.");if(request===param)try{if(!await users.findOne({username:username}))return Promise.reject("The username provided in the URL does not exist in the database.")}catch(e){return Promise.reject("Database error: "+e)}return!0})).bail({level:bailLevel})}module.exports={_validateUserFieldUnchanged:_validateUserFieldUnchanged,_validateIdInCollection:_validateIdInCollection,_ifFieldEmptyBail:_ifFieldEmptyBail,_validateFavouritesAndBail:_validateFavouritesAndBail,_valiDate:_valiDate,_checkBodyEmpty:_checkBodyEmpty,_validateUsername:_validateUsername};