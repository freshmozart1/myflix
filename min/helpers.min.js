const mongoose=require("mongoose"),{body:body,param:param,matchedData:matchedData,validationResult:validationResult,checkExact:checkExact}=require("express-validator"),{parseISO:parseISO,isValid:isValid}=require("date-fns"),models=require("./models"),directors=models.director,genres=models.genre,movies=models.movie,users=models.user;function _validateUserFieldChanged(request,field){return request(field,field+" is the same as the current "+field+".").custom(((fieldValue,{req:req})=>"password"===field?!req.user.validatePassword(fieldValue):"favourites"===field?fieldValue.length!==req.user.favourites.length||fieldValue.some(((id,i)=>id!==req.user.favourites[i].toHexString())):"birthday"===field?null===req.user.birthday&&null!==fieldValue||null===fieldValue&&null!==req.user.birthday||(null!==req.user.birthday||null!==fieldValue)&&new Date(fieldValue).toISOString()!==req.user.birthday.toISOString():fieldValue!==req.user[field]))}function _validateIdInCollection(request,field,collection,errorMessage){return request(field).custom((async fieldValue=>{try{const isValidId=async id=>mongoose.Types.ObjectId.isValid(id)&&await collection.findById(id);if(Array.isArray(fieldValue)){for(const id of fieldValue)if(!await isValidId(id))return Promise.reject(errorMessage)}else if(!await isValidId(fieldValue))return Promise.reject(errorMessage);return!0}catch(e){return Promise.reject("Database error: "+e)}}))}function _valiDate(request,field,errorMessage){return request(field,errorMessage).custom((value=>null===value||isValid(parseISO(value))))}function _checkBodyEmpty(req,res,next){if(!req.body||0===Object.keys(req.body).length)return res.status(400).end("My Body Is Nobody");next()}function _validateUsername(request){return request("username").custom((async username=>{if(username.length<5)return Promise.reject("The username must be at least 5 characters long.");if(!/^[a-zA-Z0-9]+$/.test(username))return Promise.reject("The username contains non alphanumeric characters - not allowed.");try{const userExists=await users.exists({username:username});if(request===body&&userExists||request===param&&!userExists)return Promise.reject(`The username '${username}' ${userExists?"already exists":"does not exist"} in the database.`)}catch(e){return Promise.reject("Database error: "+e)}return!0}))}function _validateDirectorName(request){return request("name").custom((async name=>{if(name.length<3)return Promise.reject("The name must be at least 3 characters long.");try{const directorExists=await directors.exists({name:name});if(request===body&&directorExists||request===param&&!directorExists)return Promise.reject(`The director '${name}' ${directorExists?"already exists":"does not exist"} in the database.`)}catch(e){return Promise.reject("Database error: "+e)}return!0}))}function _validateGenreName(request){return request("name").custom((async name=>{if(name.length<3)return Promise.reject("The name must be at least 3 characters long.");try{const genreExists=await genres.exists({name:name});if(request===body&&genreExists||request===param&&!genreExists)return Promise.reject(`The genre '${name}' ${genreExists?"already exists":"does not exist"} in the database.`)}catch(e){return Promise.reject("Database error: "+e)}return!0}))}function _validateMovieTitle(request){return request("title").custom((async title=>{try{const movieExists=await movies.exists({title:title});if(request===body&&movieExists||request===param&&!movieExists)return Promise.reject(`The movie '${title}' ${movieExists?"already exists":"does not exist"} in the database.`)}catch(e){return Promise.reject("Database error: "+e)}return!0}))}async function _getDocuments(req,res,collection){try{validationResult(req).throw();const data=matchedData(req);if("movie"===collection.modelName){if(data.title){const movie=await collection.findOne({title:data.title}).populate("genre").populate("director");return movie?res.status(200).json(movie):res.status(404).end("Movie not found.")}{let query=collection.find();data.limit&&(query=query.limit(parseInt(data.limit)));const movieList=await query.populate("genre").populate("director");return 0===movieList.length?res.status(404).end("No movies found."):res.status(200).json(movieList)}}if(data.name){const document=await collection.findOne({name:data.name});return document?res.status(200).json(document):res.status(404).end(data.name+" was not found.")}{let query=collection.find();data.limit&&(query=query.limit(parseInt(data.limit)));const documentList=await query;return 0===documentList.length?res.status(404).end(`No ${collection.modelName} found.`):res.status(200).json(documentList)}}catch(e){return Array.isArray(e.errors)&&e.errors[0].msg?res.status(422).end(e.errors[0].msg):res.status(500).end("Error: "+e)}}async function _createDocument(req,res,collection){try{validationResult(req).throw();const data=matchedData(req);switch(collection.modelName){case"user":data.password=users.hashPassword(data.password),data.birthday=data.birthday?data.birthday:null,data.favourites=data.favourites?data.favourites:null;break;case"movie":data.imagePath=data.imagePath?data.imagePath:null;break;case"genre":break;case"director":data.deathday=data.deathday?data.deathday:null,data.biography=data.biography?data.biography:null;break;default:throw new Error("Unknown collection.")}await collection.create(data),res.status(201).end(collection.modelName.charAt(0).toUpperCase()+collection.modelName.slice(1)+" was created.")}catch(e){return Array.isArray(e.errors)&&e.errors[0].msg?res.status(422).end(e.errors[0].msg):res.status(500).end("Database error: "+e)}}function _dynamicRouteValidation(req,res,next){const validationChain={"/directors":[body("name","The name is required").notEmpty().bail({level:"request"}),_validateDirectorName(body).bail({level:"request"}),body("birthday","Birthday is required").notEmpty().bail({level:"request"}),_valiDate(body,"birthday","Birthday is not a valid date.").bail({level:"request"}),_valiDate(body,"deathday","Deathday is not a valid date.").bail({level:"request"}).optional({values:"falsy"}),body("biography","Biography is required").notEmpty().bail({level:"request"}),body("biography","Biography must be a string").isString().bail({level:"request"})],"/genres":[body("name","The name is required").notEmpty().bail({level:"request"}),body("name","The name must be a string").isString().bail({level:"request"}),_validateGenreName(body).bail({level:"request"}),body("description","The description is required").notEmpty().bail({level:"request"}),body("description","The description must be a string").isString().bail({level:"request"})],"/movies":[body("title","The title is required").notEmpty().bail({level:"request"}),body("title","The title must be a string").isString().bail({level:"request"}),body("description","The description is required").notEmpty().bail({level:"request"}),body("description","The description must be a string").isString().bail({level:"request"}),body("genre","A genre ID is required").notEmpty().bail({level:"request"}),body("director","A director ID is required").notEmpty().bail({level:"request"}),body("imagePath").optional({values:"falsy"}),_validateMovieTitle(body).bail({level:"request"}),_validateIdInCollection(body,"genre",genres,"Genre not found in database.").bail({level:"request"}),_validateIdInCollection(body,"director",directors,"Director not found in database.").bail({level:"request"})],"/users":[_validateUsername(body).bail({level:"request"}),body("email","Email is required").notEmpty().bail({level:"request"}),body("email","Email does not appear to be valid").isEmail().normalizeEmail().bail({level:"request"}),body("password","Password is required").notEmpty().bail({level:"request"}),_valiDate(body,"birthday","Birthday is not a valid date.").bail({level:"request"}).optional({values:"falsy"}),body("favourites","Favourites must be an non empty array").isArray({min:1}).bail({level:"request"}).optional({values:"falsy"}),_validateIdInCollection(body,"favourites",movies,"Invalid movie ID in favourites.").bail({level:"request"}).optional({values:"falsy"})]}[req.path];return validationChain?(validationChain.push(checkExact([],{message:"Request contains unknown fields."})),validationChain.reduce(((acc,fn)=>acc.then((()=>new Promise(((resolve,reject)=>fn(req,res,(err=>err?reject(err):resolve()))))))),Promise.resolve()).then((()=>next())).catch(next)):next()}module.exports={_validateUserFieldChanged:_validateUserFieldChanged,_validateIdInCollection:_validateIdInCollection,_valiDate:_valiDate,_checkBodyEmpty:_checkBodyEmpty,_validateUsername:_validateUsername,_validateDirectorName:_validateDirectorName,_validateMovieTitle:_validateMovieTitle,_getDocuments:_getDocuments,_createDocument:_createDocument,_dynamicRouteValidation:_dynamicRouteValidation};