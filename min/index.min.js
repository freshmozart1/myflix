const express=require("express"),app=express(),morgan=require("morgan"),bodyParser=require("body-parser"),methodOverride=require("method-override"),lodash=require("lodash"),sqlite3=require("sqlite3").verbose(),db=new sqlite3.Database(":memory:");db.serialize((()=>{db.run("CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, email TEXT, password TEXT, birthday TEXT, favourites TEXT)"),db.run("CREATE table genres (id INTEGER PRIMARY KEY, name TEXT, description TEXT)"),db.run("CREATE table directors (id INTEGER PRIMARY KEY, name, birthday TEXT, deathday TEXT, biography TEXT)"),db.run("CREATE TABLE movies (id INTEGER PRIMARY KEY, title TEXT, description TEXT, genre INTEGER, director INTEGER, image TEXT, FOREIGN KEY(genre) REFERENCES genres(id), FOREIGN KEY(director) REFERENCES directors(id))")})),app.use(morgan("common")),app.use(express.static(__dirname)),app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json()),app.post("/directors",((req,res)=>{db.get("SELECT count(name) FROM directors WHERE name = ?",req.body.name,((err,row)=>{if(err)throw err;row["count(name)"]>0?res.status(409).send("Director already exists.").end():db.run("INSERT INTO directors VALUES (NULL, ?, ?, ?, ?)",[req.body.name,req.body.birthday,req.body.deathday,req.body.biography],(err=>{if(err)throw err;res.status(201).send("Director successfully created.").end()}))}))})),app.get("/directors?:limit",((req,res)=>{const limit=Number(req.query.limit);lodash.isNumber(limit)&&limit>0?db.all("SELECT * FROM directors LIMIT ?",limit,((err,directors)=>{if(err)throw err;res.status(200).json({directors:directors}).end()})):db.all("SELECT * FROM directors",((err,directors)=>{if(err)throw err;res.status(200).json({directors:directors}).end()}))})),app.get("/directors/:name",((req,res)=>{db.get("SELECT * FROM directors WHERE name = ?",req.params.name,((err,row)=>{if(err)throw err;row?res.status(200).json(row).end():res.status(404).send(`The director ${req.params.name} does not exist.`).end()}))})),app.get("/genres?:limit",((req,res)=>{const limit=Number(req.query.limit);lodash.isNumber(limit)&&limit>0?db.all("SELECT * FROM genres LIMIT ?",limit,((err,names)=>{if(err)throw err;res.status(200).json({genres:names}).end()})):db.all("SELECT * FROM genres",((err,names)=>{if(err)throw err;res.status(200).json({genres:names}).end()}))})),app.get("/genres/:name",((req,res)=>{db.get("SELECT * FROM genres WHERE name = ?",req.params.name,((err,row)=>{if(err)throw err;row?res.status(200).json(row).end():res.status(404).send(`The genre ${req.params.name} does not exist.`).end()}))})),app.post("/genres",((req,res)=>{db.get("SELECT count(name) FROM genres WHERE name = ?",req.body.name,((err,row)=>{if(err)throw err;row["count(name)"]>0?res.status(409).send(`The genre already ${req.body.name} exists.`).end():db.run("INSERT INTO genres VALUES (NULL, ?, ?)",[req.body.name,req.body.description],(err=>{if(err)throw err;res.sendStatus(201).end()}))}))})),app.get("/movies/:title",((req,res)=>{db.get("SELECT * FROM movies WHERE title = ?",req.params.title,((err,row)=>{if(err)throw err;row?db.serialize((()=>{db.get("SELECT genres.name FROM genres INNER JOIN movies ON genres.id=movies.genre",((err,genreRow)=>{if(err)throw err;row.genre=genreRow.name})),db.get("SELECT directors.name FROM directors INNER JOIN movies ON directors.id=movies.director",((err,directorRow)=>{if(err)throw err;row.director=directorRow.name,res.status(200).json(row).end()}))})):res.status(404).send(`Movie ${req.params.title} doesn't exist.`).end()}))})),app.get("/movies?:limit",((req,res)=>{const limit=Number(req.query.limit);lodash.isNumber(limit)&&limit>0?db.all("SELECT * FROM movies LIMIT ?",limit,((err,rows)=>{if(err)throw err;res.status(200).json({movies:rows}).end()})):db.all("SELECT * FROM movies",((err,movies)=>{if(err)throw err;res.status(200).json({movies:movies}).end()}))})),app.post("/movies",((req,res)=>{const genreId=Number(req.body.genre),directorId=Number(req.body.director);lodash.isNaN(genreId)?res.status(400).send("The genre ID must be a number").end():lodash.isNaN(directorId)?res.status(400).send("The director ID must be a number").end():db.get("SELECT count(title) FROM movies WHERE title = ?",req.body.title,((err,title)=>{if(err)throw err;title["count(title)"]>0?res.status(409).send("Movie already exists in database").end():db.get("SELECT count(id) FROM genres WHERE id = ?",genreId,((err,genre)=>{if(err)throw err;0!==genre["count(id)"]?db.get("SELECT count(id) FROM directors WHERE id = ?",directorId,((err,director)=>{if(err)throw err;0!==director["count(id)"]?db.run("INSERT INTO movies VALUES (NULL, ?, ?, ?, ?, ?)",[req.body.title,req.body.description,genreId,directorId,req.body.image],(err=>{if(err)throw err;res.status(201).send(`Movie ${req.body.title} was successfully added to the database.`).end()})):res.status(404).send(`No director with id ${directorId}`).end()})):res.status(404).send(`No genre with id ${genreId}`).end()}))}))})),app.post("/users",((req,res)=>{const username=req.body.username,email=req.body.email,password=req.body.password,birthday=req.body.birthday,favourites=req.body.favourites;username&&email&&password&&"string"==typeof username&&"string"==typeof email&&"string"==typeof password?db.get("SELECT count(*) FROM users WHERE username = ?",username,((err,userCountRow)=>{if(err)throw err;userCountRow["count(*)"]>0?res.status(409).send(`A user with the name ${username} already exists.`).end():birthday&&"string"!=typeof birthday||favourites&&!lodash.isArray(favourites)?res.status(400).send("Birthday param must be of type string. Favourites param must be of type array.").end():favourites?db.all(`SELECT id FROM movies WHERE id IN (${favourites.join(",")})`,((err,rows)=>{if(err)throw err;const movieIds=rows.map((row=>row.id));favourites.filter((id=>!movieIds.includes(id))).length>0?res.status(400).send("Favourites array contains invalid movie ids.").end():(db.run("INSERT INTO users VALUES (NULL, ?, ?, ?, ?, ?)",[req.body.username,req.body.email,req.body.password,req.body.birthday,"["+favourites.join(", ")+"]"]),res.status(201).send("User successfully created").end())})):(db.run("INSERT INTO users VALUES (NULL, ?, ?, ?, ?, NULL)",[req.body.username,req.body.email,req.body.password,req.body.birthday]),res.status(201).send("User successfully created").end())})):res.status(400).send("The request body must contain a JSON object with the keys username, email and passsword. All these params must be of type string").end()})),app.get("/users/:username",((req,res)=>{db.get("SELECT * FROM users WHERE username = ?",req.params.username,((err,user)=>{if(err)throw err;user&&lodash.isNull(user.favourites)?res.json(user).status(200).end():user?db.all("SELECT title FROM movies WHERE id IN ("+JSON.parse(user.favourites).join()+")",((err,movieTitles)=>{if(err||0===movieTitles.length)throw err;user.favourites=movieTitles.map((movie=>movie.title)),res.json(user).status(200).end()})):res.status(404).send(`User with username '${req.params.username}' doesn't exist.`).end()}))})),app.delete("/users/:username",((req,res)=>{const username=req.params.username;db.get("SELECT count(*) FROM users WHERE username = ?",username,((err,row)=>{if(err)throw err;0===row["count(*)"]?res.status(404).send(`User with username '${username}' doesn't exist.`).end():db.run("DELETE FROM users WHERE username = ?",username,(err=>{if(err)throw err;res.status(204).send(`Successfully deleted user ${username}`).end()}))}))})),app.patch("/users/:username",((req,res)=>{db.get("SELECT count(*) FROM users WHERE username = ?",req.params.username,((err,row)=>{if(err)throw err;const updatedFields=[];if(0!==row["count(*)"])if(req.body.password&&"string"!=typeof req.body.password)res.status(400).send("Password is not of type string").end();else{if(req.body.password)db.run("UPDATE users SET password = ? WHERE username = ?",[req.body.password,req.params.username],(err=>{if(err)throw err})),updatedFields.push("password");else if(null===req.body.password)return void res.status(400).send("Password can't be null").end();if(req.body.username&&"string"!=typeof req.body.username)res.status(400).send("Username is not of type string").end();else{if(req.body.username)db.run("UPDATE users SET username = ? WHERE username = ?",[req.body.username,req.params.username],(err=>{if(err)throw err})),updatedFields.push("username");else if(null===req.body.username)return void res.status(400).send("Username can't be null").end();if(req.body.email&&"string"!=typeof req.body.email)res.status(400).send("Email is not of type string").end();else{if(req.body.email)db.run("UPDATE users SET email = ? WHERE username = ?",[req.body.email,req.params.username],(err=>{if(err)throw err})),updatedFields.push("email");else if(null===req.body.email)return void res.status(400).send("Email can't be null").end();req.body.birthday&&"string"!=typeof req.body.birthday?res.status(400).send("Birthday is not of type string").end():(null===req.body.birthday?(db.run("UPDATE users SET birthday = NULL WHERE username = ?",req.params.username,(err=>{if(err)throw err})),updatedFields.push("birthday")):req.body.birthday&&(db.run("UPDATE users SET birthday = ? WHERE username = ?",[req.body.birthday,req.params.username],(err=>{if(err)throw err})),updatedFields.push("birthday")),!req.body.favourites||Array.isArray(req.body.favourites)?null===req.body.favourites||req.body.favourites&&0===req.body.favourites.length?(db.run("UPDATE users SET favourites = NULL WHERE username = ?",req.params.username,(err=>{if(err)throw err})),updatedFields.push("favourites"),res.status(200).send(`Updated fields: ${updatedFields.join(", ")}`).end()):req.body.favourites?db.all("SELECT id FROM movies WHERE id IN ("+req.body.favourites.join(",")+")",((err,movieIds)=>{if(err)throw err;movieIds=movieIds.map((row=>row.id));req.body.favourites.filter((id=>!movieIds.includes(id))).length>0?res.status(400).send("One or more movie IDs do not exist").end():(db.run("UPDATE users SET favourites = ? WHERE username = ?",["["+req.body.favourites.join(",")+"]",req.params.username],(err=>{if(err)throw err})),updatedFields.push("favourites"),res.status(200).send(`Updated fields: ${updatedFields.join(", ")}`).end())})):updatedFields.length>0?res.status(200).send(`Updated fields: ${updatedFields.join(", ")}`).end():res.status(400).send("No valid fields to update").end():res.status(400).send("Favourites is not of type array").end())}}}else res.status(404).send(`User with username '${req.params.username}' doesn't exist.`).end()}))})),app.use(methodOverride()),app.use(((err,_,res,next)=>{console.error(err.stack),res.status(500).send("Something broke!"),next()})),app.listen(8e3,(()=>{console.log("Your app is listening on port 8000.")}));