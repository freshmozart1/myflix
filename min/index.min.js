const express=require("express"),mongoose=require("mongoose"),morgan=require("morgan"),methodOverride=require("method-override"),passport=require("passport"),cors=require("cors"),{param:param,matchedData:matchedData,validationResult:validationResult,body:body,checkExact:checkExact,query:query}=require("express-validator"),{_validateFieldUnchanged:_validateFieldUnchanged,_validateIdInCollection:_validateIdInCollection,_valiDate:_valiDate,_checkBodyEmpty:_checkBodyEmpty,_validateUsername:_validateUsername,_validateMovieTitle:_validateMovieTitle}=require("./helpers.js"),models=require("./models.js"),auth=require("./auth.js"),app=express(),movies=models.movie,users=models.user,directors=models.director,genres=models.genre;mongoose.connect(process.env.CONNECTION_URI),app.use(cors()),app.use(morgan("common")),app.use(express.static(__dirname)),app.use(express.urlencoded({extended:!0})),app.use(express.json()),auth(app),require("./passport.js"),app.post("/directors",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{await directors.findOne({name:req.body.name}).then((director=>{if(director)return res.status(400).send(req.body.name+" already exists.");directors.create({name:req.body.name,birthday:req.body.birthday,deathday:req.body.deathday,biography:req.body.biography}).then((director=>{res.status(201).json(director)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/directors/:name?",[param("name").optional({values:"falsy"}),query("limit").optional({values:"falsy"}).isInt({gt:0}),checkExact([],{message:"Request contains unknown fields."})],(async(req,res)=>{try{validationResult(req).throw();const data=matchedData(req);if(data.name){const director=await directors.findOne({name:data.name});return director?res.status(200).json(director):res.status(404).end(data.name+" was not found.")}{let query=directors.find();data.limit&&(query=query.limit(parseInt(data.limit)));const directorList=await query;return 0===directorList.length?res.status(404).end("No directors found."):res.status(200).json(directorList)}}catch(e){return Array.isArray(e.errors)&&e.errors[0].msg?res.status(422).end(e.errors[0].msg):res.status(500).end("Error: "+e)}})),app.get("/genres/:name?",[param("name").optional({values:"falsy"}),query("limit").optional({values:"falsy"}).isInt({gt:0}),checkExact([],{message:"Request contains unknown fields."})],(async(req,res)=>{try{validationResult(req).throw();const data=matchedData(req);if(data.name){const genre=await genres.findOne({name:data.name});return genre?res.status(200).json(genre):res.status(404).end(data.name+" was not found.")}{let query=genres.find();data.limit&&(query=query.limit(parseInt(data.limit)));const genreList=await query;return 0===genreList.length?res.status(404).end("No genres found."):res.status(200).json(genreList)}}catch(e){return Array.isArray(e.errors)&&e.errors[0].msg?res.status(422).end(e.errors[0].msg):res.status(500).end("Error: "+e)}})),app.post("/genres",passport.authenticate("jwt",{session:!1}),((req,res)=>{genres.findOne({name:req.body.name}).then((genre=>{if(genre)return res.status(400).send(req.body.name+" already exists.");genres.create({name:req.body.name,description:req.body.description}).then((genre=>{res.status(201).json(genre)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies/:title?",[param("title").optional({values:"falsy"}),query("limit").optional({values:"falsy"}).isInt({gt:0}),checkExact([],{message:"Request contains unknown fields."})],(async(req,res)=>{try{validationResult(req).throw();const data=matchedData(req);if(data.title){const movie=await movies.findOne({title:data.title}).populate("genre").populate("director");return movie?res.status(200).json(movie):res.status(404).end("Movie not found.")}{let query=movies.find();data.limit&&(query=query.limit(parseInt(data.limit)));const movieList=await query.populate("genre").populate("director");return 0===movieList.length?res.status(404).end("No movies found."):res.status(200).json(movieList)}}catch(e){return Array.isArray(e.errors)&&e.errors[0].msg?res.status(422).end(e.errors[0].msg):res.status(500).end("Error: "+e)}})),app.post("/movies",[passport.authenticate("jwt",{session:!1}),_checkBodyEmpty,body("title","The title is required").notEmpty().bail({level:"request"}),body("title","The title must be a string").isString().bail({level:"request"}),body("description","The description is required").notEmpty().bail({level:"request"}),body("description","The description must be a string").isString().bail({level:"request"}),body("genre","A genre ID is required").notEmpty().bail({level:"request"}),body("director","A director ID is required").notEmpty().bail({level:"request"}),body("imagePath").optional({values:"falsy"}),_validateMovieTitle(body).bail({level:"request"}),_validateIdInCollection(body,"genre",genres,"Genre not found in database.").bail({level:"request"}),_validateIdInCollection(body,"director",directors,"Director not found in database.").bail({level:"request"}),checkExact([],{message:"Request body contains unknown fields."})],(async(req,res)=>{try{validationResult(req).throw();const data=matchedData(req);await movies.create({title:data.title,description:data.description,genre:data.genre,director:data.director,imagePath:data.imagePath?data.imagePath:null}),res.status(201).end("Movie "+data.title+" was created.")}catch(e){return Array.isArray(e.errors)&&e.errors[0].msg?res.status(422).end(e.errors[0].msg):res.status(500).end("Database error: "+e)}})),app.post("/users",[_checkBodyEmpty,_validateUsername(body).bail({level:"request"}),body("email","Email is required").notEmpty().bail({level:"request"}),body("email","Email does not appear to be valid").isEmail().normalizeEmail().bail({level:"request"}),body("password","Password is required").notEmpty().bail({level:"request"}),_valiDate(body,"birthday","Birthday is not a valid date.").bail({level:"request"}).optional({values:"falsy"}),body("favourites","Favourites must be an non empty array").isArray({min:1}).bail({level:"request"}).optional({values:"falsy"}),_validateIdInCollection(body,"favourites",movies,"Invalid movie ID in favourites.").bail({level:"request"}).optional({values:"falsy"}),checkExact([],{message:"Request body contains unknown fields."})],(async(req,res)=>{try{validationResult(req).throw();const data=matchedData(req);await users.create({username:data.username,password:users.hashPassword(data.password),email:data.email,birthday:data.birthday?data.birthday:null,favourites:data.favourites?data.favourites:null}),res.status(201).end("User "+data.username+" was created.")}catch(e){return Array.isArray(e.errors)&&e.errors[0].msg?res.status(422).end(e.errors[0].msg):res.status(500).end("Database error: "+e)}})),app.delete("/users/:username",[passport.authenticate("jwt",{session:!1}),_validateUsername(param).bail({level:"request"}),param("username","not_allowed").custom(((value,{req:req})=>value===req.user.username))],(async(req,res)=>{try{validationResult(req).throw();const data=matchedData(req);if(0===(await users.deleteOne({username:data.username})).deletedCount)return res.status(404).end(data.username+" wasn't found.");res.status(200).end(req.params.username+" was deleted.")}catch(e){return Array.isArray(e.errors)&&e.errors[0].msg?res.status(422).end(e.errors[0].msg):res.status(500).end("Database error: "+e)}})),app.patch("/users/:username",[passport.authenticate("jwt",{session:!1}),_checkBodyEmpty,_validateUsername(param).bail({level:"request"}),param("username","You are not allowed to update this user!").custom(((value,{req:req})=>value===req.user.username)).bail({level:"request"}),_validateFieldUnchanged(body,"username").bail({level:"request"}).optional({values:"falsy"}),_validateUsername(body).bail({level:"request"}).optional({values:"falsy"}),_validateFieldUnchanged(body,"email").bail({level:"request"}).optional({values:"falsy"}),body("email","Email does not appear to be valid").isEmail().bail({level:"request"}).normalizeEmail().optional({values:"falsy"}),_validateFieldUnchanged(body,"password").bail({level:"request"}).optional({values:"falsy"}),_validateFieldUnchanged(body,"birthday").bail({level:"request"}).optional({values:"falsy"}),_valiDate(body,"birthday","Birthday is not a vaild date").bail({level:"request"}).optional({values:"falsy"}),_validateFieldUnchanged(body,"favourites").bail({level:"request"}).optional({values:"falsy"}),_validateIdInCollection(body,"favourites",movies,"Invalid movie ID in favourites.").bail({level:"request"}).optional({values:"falsy"}),checkExact([],{message:"Request body contains unknown fields."})],(async(req,res)=>{try{validationResult(req).throw();const data=matchedData(req);if(data.password&&(data.password=users.hashPassword(data.password)),0===(await users.updateOne({username:req.params.username},data)).modifiedCount)return res.status(404).end(req.params.username+" was not found.");res.status(200).end("Successfully updated user "+req.params.username)}catch(e){if(Array.isArray(e.errors)&&e.errors[0].msg)return res.status(422).end(e.errors[0].msg);res.status(500).end("Database error: "+e)}})),app.post("/test",[body().custom((value=>1!==Object.keys(value).length||"freshmozart"!==value.test||Promise.reject("No valid data provided.")))],((req,res)=>{try{validationResult(req).throw(),res.status(200).send("Success")}catch(e){if("field"===e.type)res.status(422).json({errors:e.errors});else console.error(e.errors),res.status(500).send("Error: "+e)}})),app.use(methodOverride()),app.use(((err,_,res,next)=>{console.error(err.stack),res.status(500).send("Something broke!"),next()}));const port=process.env.PORT||8e3;app.listen(port,"0.0.0.0",(()=>{console.log("Listening on port "+port)}));