const{id:id}=require("date-fns/locale"),mongoose=require("mongoose"),{body:body,param:param}=require("express-validator"),{parseISO:parseISO,isValid:isValid}=require("date-fns"),models=require("./models"),movies=models.movie,users=models.user;function _validateUserFieldUnchanged(request,field){return request(field,field+" is the same as the current "+field+".").custom(((fieldValue,{req:req})=>{if("password"===field&&req.user.validatePassword(fieldValue))return!1;if("favourites"===field){if(fieldValue.length!==req.user.favourites.length)return!0;for(let i=0;i<fieldValue.length;i++)if(fieldValue[i]!==req.user.favourites[i].toHexString())return!0;return!1}return fieldValue!==req.user[field]}))}function _validateIdInCollection(request,field,collection,errorMessage){return request(field).custom((async fieldValue=>{try{if(Array.isArray(fieldValue))for(const id of fieldValue)if(!mongoose.Types.ObjectId.isValid(id)||!await collection.findById(id))return Promise.reject(errorMessage);return!(!mongoose.Types.ObjectId.isValid(fieldValue)||!await collection.findById(id))||Promise.reject(errorMessage)}catch(e){return Promise.reject("Database error: "+e)}}))}function _valiDate(request,field,errorMessage){return request(field,errorMessage).custom((value=>isValid(parseISO(value))))}function _checkBodyEmpty(req,res,next){if(!req.body||0===Object.keys(req.body).length)return res.status(400).end("My Body Is Nobody");next()}function _validateUsername(request){return request("username").custom((async username=>{if(username.length<5)return Promise.reject("The username must be at least 5 characters long.");if(!username.match(/^[a-zA-Z0-9]+$/))return Promise.reject("The username contains non alphanumeric characters - not allowed.");try{const user=await users.exists({username:username});if(request===body&&user)return Promise.reject("The username '"+username+"' already exists in the database.");if(request===param&&!user)return Promise.reject("The username '"+username+"' does not exist in the database.")}catch(e){return Promise.reject("Database error: "+e)}return!0}))}function _validateMovieTitle(request){return request("title").custom((async title=>{try{const movie=await movies.exists({title:title});return request===body&&movie?Promise.reject("The movie '"+title+"' already exists in the database."):!(request===param&&!movie)||Promise.reject("The movie '"+title+"' does not exist in the database.")}catch(e){return Promise.reject("Database error: "+e)}}))}module.exports={_validateUserFieldUnchanged:_validateUserFieldUnchanged,_validateIdInCollection:_validateIdInCollection,_valiDate:_valiDate,_checkBodyEmpty:_checkBodyEmpty,_validateUsername:_validateUsername,_validateMovieTitle:_validateMovieTitle};