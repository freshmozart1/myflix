const express=require("express"),mongoose=require("mongoose"),morgan=require("morgan"),methodOverride=require("method-override"),passport=require("passport"),models=require("./models.js"),auth=require("./auth.js"),app=express(),movies=models.movie,users=models.user,directors=models.director,genres=models.genre;function _hasCommonKeyValuePairs(body,schema){const bodyKeys=Object.keys(body),schemaSet=new Set(Object.keys(schema.paths)),commonKeyValuePairs={};let hasCommonKeys=!1;for(const key of bodyKeys)schemaSet.has(key)&&(commonKeyValuePairs[key]=body[key],hasCommonKeys=!0);return!!hasCommonKeys&&commonKeyValuePairs}mongoose.connect("mongodb://localhost:27017/myflix"),app.use(morgan("common")),app.use(express.static(__dirname)),app.use(express.urlencoded({extended:!0})),app.use(express.json()),auth(app),require("./passport.js"),app.post("/directors",(async(req,res)=>{await directors.findOne({name:req.body.name}).then((director=>{if(director)return res.status(400).send(req.body.name+" already exists.");directors.create({name:req.body.name,birthday:req.body.birthday,deathday:req.body.deathday,biography:req.body.biography}).then((director=>{res.status(201).json(director)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/directors?:limit",((req,res)=>{req.query.limit&&/^[1-9]\d*$/.test(req.query.limit)?directors.find().limit(parseInt(req.query.limit)).then((directors=>res.status(200).json(directors))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)})):directors.find().then((directors=>res.status(200).json(directors))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/directors/:name",((req,res)=>{directors.findOne({name:req.params.name}).then((director=>{if(!director)return res.status(404).send(req.params.name+" was not found.");res.status(200).json(director)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/genres?:limit",((req,res)=>{req.query.limit&&/^[1-9]\d*$/.test(req.query.limit)?genres.find().limit(parseInt(req.query.limit)).then((genres=>{if(0===genres.length)return res.status(404).send("No genres found.");res.status(200).json(genres)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)})):genres.find().then((genres=>{if(0===genres.length)return res.status(404).send("No genres found.");res.status(200).json(genres)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/genres/:name",((req,res)=>{genres.findOne({name:req.params.name}).then((genre=>{if(!genre)return res.status(404).send(req.params.name+" was not found.");res.status(200).json(genre)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.post("/genres",((req,res)=>{genres.findOne({name:req.body.name}).then((genre=>{if(genre)return res.status(400).send(req.body.name+" already exists.");genres.create({name:req.body.name,description:req.body.description}).then((genre=>{res.status(201).json(genre)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies/:title",passport.authenticate("jwt",{session:!1}),((req,res)=>{movies.findOne({title:req.params.title}).populate("genre").populate("director").then((movie=>{if(!movie)return res.status(404).send(req.params.title+" was not found.");res.status(200).json(movie)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies?:limit",((req,res)=>{req.query.limit&&/^[1-9]\d*$/.test(req.query.limit)?movies.find().limit(parseInt(req.query.limit)).populate("genre").populate("director").then((movies=>{if(0===movies.length)return res.status(404).send("No movies found.");res.status(200).json(movies)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)})):movies.find().populate("genre").populate("director").then((movies=>{if(0===movies.length)return res.status(404).send("No movies found.");res.status(200).json(movies)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.post("/movies",((req,res)=>{movies.findOne({title:req.body.title}).then((movie=>{if(movie)return res.status(400).send(req.body.title+" already exists.");directors.findById(req.body.director).then((director=>{if(!director)return res.status(404).send("Director not found.");genres.findById(req.body.genre).then((genre=>{if(!genre)return res.status(404).send("Genre not found.");movies.create({title:req.body.title,description:req.body.description,director:director,genre:genre,imagePath:req.body.imagePath}).then((movie=>{res.status(201).json(movie)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.post("/users",(async(req,res)=>{await users.findOne({username:req.body.username}).then((async user=>user?res.status(400).send(req.body.username+" already exists."):Array.isArray(req.body.favourites)?0!==req.body.favourites.length&&(await movies.find({_id:{$in:req.body.favourites}})).length!==req.body.favourites.length?res.status(404).send("One or more of the movies in the favourites list could not be found."):void users.create({username:req.body.username,password:req.body.password,email:req.body.email,birthday:req.body.birthday,favourites:req.body.favourites}).then((user=>{res.status(201).json(user)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)})):res.status(400).send("Favourites must be an array."))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.delete("/users/:username",(async(req,res)=>{await users.deleteOne({username:req.params.username}).then((result=>{if(0===result.deletedCount)return res.status(404).send(req.params.username+" was not found.");res.status(200).send(req.params.username+" was deleted.")})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.patch("/users/:username",passport.authenticate("jwt",{session:!1}),((req,res)=>{const commonKeyValuePairs=_hasCommonKeyValuePairs(req.body,users.schema);return commonKeyValuePairs?req.user.username!==req.params.username?res.status(403).send("You are not allowed to update this user.").end():void users.findOneAndUpdate({username:req.params.username},commonKeyValuePairs,{new:!0}).then((user=>user?res.status(200).send("Successfully updated user "+req.params.username).end():res.status(404).send(req.params.username+" was not found.").end())).catch((err=>(console.error(err),res.status(500).send("Error: "+err).end()))):res.status(400).send("No keys in the requests body match the databases schema.").end()})),app.use(methodOverride()),app.use(((err,_,res,next)=>{console.error(err.stack),res.status(500).send("Something broke!"),next()})),app.listen(8e3,(()=>{console.log("Your app is listening on port 8000.")}));