const express=require("express"),app=express(),mongoose=require("mongoose"),models=require("./models.js"),movies=models.movie,users=models.user,directors=models.director,genres=models.genre,morgan=require("morgan"),methodOverride=require("method-override");mongoose.connect("mongodb://localhost:27017/myflix"),app.use(morgan("common")),app.use(express.static(__dirname)),app.use(express.urlencoded({extended:!0})),app.use(express.json()),app.post("/directors",(async(req,res)=>{await directors.findOne({name:req.body.name}).then((director=>{if(director)return res.status(400).send(req.body.name+" already exists.");directors.create({name:req.body.name,birthday:req.body.birthday,deathday:req.body.deathday,biography:req.body.biography}).then((director=>{res.status(201).json(director)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/directors?:limit",((req,res)=>{req.query.limit&&/^[1-9]\d*$/.test(req.query.limit)?directors.find().limit(parseInt(req.query.limit)).then((directors=>res.status(200).json(directors))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)})):directors.find().then((directors=>res.status(200).json(directors))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/directors/:name",((req,res)=>{directors.findOne({name:req.params.name}).then((director=>{if(!director)return res.status(404).send(req.params.name+" was not found.");res.status(200).json(director)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/genres?:limit",((req,res)=>{console.log(typeof req.query.limit),req.query.limit&&/^[1-9]\d*$/.test(req.query.limit)?(console.log(req.query.limit),genres.find().limit(parseInt(req.query.limit)).then((genres=>res.status(200).json(genres))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))):genres.find().then((genres=>res.status(200).json(genres))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/genres/:name",((req,res)=>{})),app.post("/genres",((req,res)=>{genres.findOne({name:req.body.name}).then((genre=>{if(genre)return res.status(400).send(req.body.name+" already exists.");genres.create({name:req.body.name,description:req.body.description}).then((genre=>{res.status(201).json(genre)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies/:title",((req,res)=>{})),app.get("/movies?:limit",((req,res)=>{})),app.post("/movies",((req,res)=>{})),app.post("/users",(async(req,res)=>{await users.findOne({username:req.body.username}).then((user=>{if(user)return res.status(400).send(req.body.username+" already exists.");users.create({username:req.body.username,password:req.body.password,email:req.body.email,birthday:req.body.birthday}).then((user=>{res.status(201).json(user)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/users",(async(req,res)=>{await users.find().then((users=>res.status(201).json(users))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/users/:username",(async(req,res)=>{await users.findOne({username:req.params.username}).then((user=>{if(!user)return res.status(404).send(req.params.username+" was not found.");res.status(200).json(user)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.delete("/users/:username",(async(req,res)=>{await users.deleteOne({username:req.params.username}).then((result=>{if(0===result.deletedCount)return res.status(404).send(req.params.username+" was not found.");res.status(200).send(req.params.username+" was deleted.")})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.patch("/users/:username",((req,res)=>{})),app.use(methodOverride()),app.use(((err,_,res,next)=>{console.error(err.stack),res.status(500).send("Something broke!"),next()})),app.listen(8e3,(()=>{console.log("Your app is listening on port 8000.")}));