const express=require("express"),mongoose=require("mongoose"),morgan=require("morgan"),methodOverride=require("method-override"),passport=require("passport"),cors=require("cors"),{check:check,param:param,matchedData:matchedData,validationResult:validationResult,body:body,checkExact:checkExact}=require("express-validator"),models=require("./models.js"),auth=require("./auth.js"),app=express(),movies=models.movie,users=models.user,directors=models.director,genres=models.genre;mongoose.connect(process.env.CONNECTION_URI),app.use(cors({origin:(origin,callback)=>callback(null,!0)})),app.use(morgan("common")),app.use(express.static(__dirname)),app.use(express.urlencoded({extended:!0})),app.use(express.json()),auth(app),require("./passport.js"),app.post("/directors",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{await directors.findOne({name:req.body.name}).then((director=>{if(director)return res.status(400).send(req.body.name+" already exists.");directors.create({name:req.body.name,birthday:req.body.birthday,deathday:req.body.deathday,biography:req.body.biography}).then((director=>{res.status(201).json(director)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/directors?:limit",((req,res)=>{req.query.limit&&/^[1-9]\d*$/.test(req.query.limit)?directors.find().limit(parseInt(req.query.limit)).then((directors=>res.status(200).json(directors))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)})):directors.find().then((directors=>res.status(200).json(directors))).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/directors/:name",((req,res)=>{directors.findOne({name:req.params.name}).then((director=>{if(!director)return res.status(404).send(req.params.name+" was not found.");res.status(200).json(director)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/genres?:limit",((req,res)=>{req.query.limit&&/^[1-9]\d*$/.test(req.query.limit)?genres.find().limit(parseInt(req.query.limit)).then((genres=>{if(0===genres.length)return res.status(404).send("No genres found.");res.status(200).json(genres)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)})):genres.find().then((genres=>{if(0===genres.length)return res.status(404).send("No genres found.");res.status(200).json(genres)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/genres/:name",((req,res)=>{genres.findOne({name:req.params.name}).then((genre=>{if(!genre)return res.status(404).send(req.params.name+" was not found.");res.status(200).json(genre)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.post("/genres",passport.authenticate("jwt",{session:!1}),((req,res)=>{genres.findOne({name:req.body.name}).then((genre=>{if(genre)return res.status(400).send(req.body.name+" already exists.");genres.create({name:req.body.name,description:req.body.description}).then((genre=>{res.status(201).json(genre)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies/:title",((req,res)=>{movies.findOne({title:req.params.title}).populate("genre").populate("director").then((movie=>{if(!movie)return res.status(404).send(req.params.title+" was not found.");res.status(200).json(movie)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies?:limit",((req,res)=>{req.query.limit&&/^[1-9]\d*$/.test(req.query.limit)?movies.find().limit(parseInt(req.query.limit)).populate("genre").populate("director").then((movies=>{if(0===movies.length)return res.status(404).send("No movies found.");res.status(200).json(movies)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)})):movies.find().populate("genre").populate("director").then((movies=>{if(0===movies.length)return res.status(404).send("No movies found.");res.status(200).json(movies)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.post("/movies",passport.authenticate("jwt",{session:!1}),((req,res)=>{movies.findOne({title:req.body.title}).then((movie=>{if(movie)return res.status(400).send(req.body.title+" already exists.");directors.findById(req.body.director).then((director=>{if(!director)return res.status(404).send("Director not found.");genres.findById(req.body.genre).then((genre=>{if(!genre)return res.status(404).send("Genre not found.");movies.create({title:req.body.title,description:req.body.description,director:director,genre:genre,imagePath:req.body.imagePath}).then((movie=>{res.status(201).json(movie)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.post("/users",[body("username","Username is required").isLength({min:5}).escape().bail({level:"request"}),body("username","Username contains non alphanumeric characters - not allowed.").isAlphanumeric().bail({level:"request"}),body("email","Email is required").notEmpty().bail({level:"request"}),body("email","Email does not appear to be valid").isEmail().normalizeEmail().bail({level:"request"}),body("password","Password is required").notEmpty().bail({level:"request"}),body("birthday","Birthday must be a date (YYYY-MM-DD)").optional({values:"falsy"}).custom((value=>!isNaN(Date.parse(value)))).bail({level:"request"}),body("favourites","Favourites must be an non empty array").isArray({min:1}).optional({values:"falsy"}).custom((async favourites=>{for(const id of favourites)if(!await movies.findById(id))return Promise.reject("Invalid movie ID in favourites.");return!0}))],(async(req,res)=>{const errors=validationResult(req);if(!errors.isEmpty())return res.status(422).json({errors:errors.array()});const data=matchedData(req);await users.findOne({username:data.username}).then((async user=>{if(user)return res.status(400).send(data.username+" already exists.");users.create({username:data.username,password:users.hashPassword(data.password),email:data.email,birthday:data.birthday?data.birthday:null,favourites:data.favourites?data.favourites:null}).then((user=>{res.status(201).json(user)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.delete("/users/:username",[passport.authenticate("jwt",{session:!1}),param("username","username_required").isLength({min:5}).escape().bail({level:"request"}),param("username","not_allowed").custom(((value,{req:req})=>value===req.user.username))],(async(req,res)=>{let errors=validationResult(req);if(errors.isEmpty())await users.deleteOne({username:req.params.username}).then((result=>{if(0===result.deletedCount)return res.status(404).send(req.params.username+" was not found.");res.status(200).send(req.params.username+" was deleted.")})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}));else switch(errors=errors.array(),errors[0].msg){case"username_required":res.status(422).end("Please provide a valid username.");break;case"not_allowed":res.status(403).end("You are not allowed to delete this user!");break;default:res.status(422).json({errors:errors})}})),app.patch("/users/:username",[passport.authenticate("jwt",{session:!1}),param("username","username_required").isLength({min:5}).escape().bail({level:"request"}),param("username","not_allowed").custom(((value,{req:req})=>value===req.user.username)).bail({level:"request"}),checkExact([body("username","Username must be at least 5 characters long,").isLength({min:5}).escape().optional({values:"falsy"}),body("username","Username contains non alphanumeric characters - not allowed.").isAlphanumeric().escape().optional({values:"falsy"}),body("email","Email does not appear to be valid").isEmail().normalizeEmail().optional({values:"falsy"}),body("password","Password is required").optional({values:"falsy"}),body("birthday","Birthday must be a date (YYYY-MM-DD)").custom((value=>!isNaN(Date.parse(value)))).optional({values:"falsy"}),body("favourites","Favourites must be an non empty array").isArray({min:1}).optional({values:"falsy"}).custom((async favourites=>{for(const id of favourites)if(!await movies.findById(id))return Promise.reject("Invalid movie ID in favourites.");return!0}))])],((req,res)=>{let errors=validationResult(req);if(errors.isEmpty()){const data=matchedData(req);if(1===Object.keys(data).length&&data.username===req.user.username)return res.status(400).send("No valid data provided.").end();console.log(data),users.findOneAndUpdate({username:req.params.username},data,{new:!0}).then((user=>user?res.status(200).send("Successfully updated user "+req.params.username):res.status(404).send(req.params.username+" was not found."))).catch((err=>(console.error(err),res.status(500).send("Error: "+err))))}else switch(errors=errors.array(),errors[0].msg){case"username_required":res.status(422).end("Please provide a valid username.");break;case"not_allowed":res.status(403).end("You are not allowed to update this user!");break;default:res.status(422).json({errors:errors}).end()}})),app.use(methodOverride()),app.use(((err,_,res,next)=>{console.error(err.stack),res.status(500).send("Something broke!"),next()}));const port=process.env.PORT||8e3;app.listen(port,"0.0.0.0",(()=>{console.log("Listening on port "+port)}));